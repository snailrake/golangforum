// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/topic_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/topic_repository.go -destination=internal/repository/mocks/topic_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "golangforum/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTopicRepository is a mock of TopicRepository interface.
type MockTopicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTopicRepositoryMockRecorder
	isgomock struct{}
}

// MockTopicRepositoryMockRecorder is the mock recorder for MockTopicRepository.
type MockTopicRepositoryMockRecorder struct {
	mock *MockTopicRepository
}

// NewMockTopicRepository creates a new mock instance.
func NewMockTopicRepository(ctrl *gomock.Controller) *MockTopicRepository {
	mock := &MockTopicRepository{ctrl: ctrl}
	mock.recorder = &MockTopicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicRepository) EXPECT() *MockTopicRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTopicRepository) Create(topic *model.Topic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTopicRepositoryMockRecorder) Create(topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTopicRepository)(nil).Create), topic)
}

// Delete mocks base method.
func (m *MockTopicRepository) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTopicRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTopicRepository)(nil).Delete), id)
}

// GetAll mocks base method.
func (m *MockTopicRepository) GetAll() ([]model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTopicRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTopicRepository)(nil).GetAll))
}
